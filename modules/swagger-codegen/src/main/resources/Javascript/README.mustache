# {{projectName}}

{{moduleName}} - JavaScript client for {{projectName}}
{{#appDescription}}
{{{appDescription}}}
{{/appDescription}}
This SDK is automatically generated by the [Swagger Codegen](https://github.com/swagger-api/swagger-codegen) project:

- API version: {{appVersion}}
- Package version: {{projectVersion}}
- Build date: {{generatedDate}}
- Build package: {{generatorClass}}
{{#infoUrl}}
For more information, please visit [{{{infoUrl}}}]({{{infoUrl}}})
{{/infoUrl}}

## Installation

### For [Node.js](https://nodejs.org/)

#### npm

To publish the library as a [npm](https://www.npmjs.com/),
please follow the procedure in ["Publishing npm packages"](https://docs.npmjs.com/getting-started/publishing-npm-packages).

Then install it via:

```shell
npm install {{{projectName}}} --save
```

#### git
#
If the library is hosted at a git repository, e.g.
https://github.com/{{#gitUserName}}{{.}}{{/gitUserName}}{{^gitUserName}}YOUR_USERNAME{{/gitUserName}}/{{#gitRepoId}}{{.}}{{/gitRepoId}}{{^gitRepoId}}{{projectName}}{{/gitRepoId}}
then install it via:

```shell
npm install {{#gitUserName}}{{.}}{{/gitUserName}}{{^gitUserName}}YOUR_USERNAME{{/gitUserName}}/{{#gitRepoId}}{{.}}{{/gitRepoId}}{{^gitRepoId}}{{projectName}}{{/gitRepoId}} --save
```

### For browser

The library also works in the browser environment via npm and [browserify](http://browserify.org/). After following
the above steps with Node.js and installing browserify with `npm install -g browserify`,
perform the following (assuming *main.js* is your entry file):

```shell
browserify main.js > bundle.js
```

Then include *bundle.js* in the HTML pages.

## Getting Started

> INFO: We use Promises as return values from the client API, instead of superagent callbacks

Please follow the [installation](#installation) instruction and execute the following JS code:

```javascript
// Sample error handler
function handleError(e) {
    if (e.errno) {
        console.error(`${e.message}`);
    } else if (e.status) {
        console.error(`${e.status} ${e.message} - ${e.response.res.text}`);
    } else {
        console.error('Unknown error!');
    }
}

var slambySdk = require('slamby-sdk');
// OR if you use from local
var slambySdk = require('./path/to/src/index.js');

var client = new slambySdk.ApiClient(); 
client.basePath = "http://<api_host>/";
client.defaultHeaders = {
    "Authorization": "Slamby <api_secret>"
};
```

Getting DataSet list

```javascript
var dataSetManager = new slambySdk.DataSetApi(client);
dataSetManager.getDataSets()
    .then(function(dataSets){
      // ...
    })
    .catch(handleError);
```

Selecting a DataSet for work

```javascript
client.defaultHeaders["X-DataSet"] = "<my_dataset>"; 
```

Get Tag list

```javascript
var tagManager = new slambySdk.TagApi(client);
tagManager.getTags({withDetails : false})
    .then(function(tags){
      // ...
    })
    .catch(handleError);
```

Creating a new Tag

```javascript
var tag = new slambySdk.Tag("1234", "New tag");
tagManager.createTag({tag : tag})
    .then(function(res){
    })
    .catch(handleError);
```

Get & update a Document 

```javascript
var documentManager = new slambySdk.DocumentApi(client);
documentManager.getDocument("123456")
    .then(function(document){
        document.language = "hu";
        documentManager.updateDocument("123456", {document : document})
            .catch(handleError);
    })
    .catch(handleError);
```

Filter Documents

```javascript
var pagination = new slambySdk.Pagination();
pagination.Limit = 10;
pagination.Offset = 0;
pagination.OrderByField = 'id';
pagination.OrderDirection = 'Asc';
var filterSettings = new slambySdk.DocumentFilterSettings();
filterSettings.Pagination = pagination;

documentManager.getFilteredDocuments({filterSettings: filterSettings})
    .then(function(documents){
        // ...
    })
    .catch(handleError);    
```

## Documentation for API Endpoints

All URIs are relative to *{{basePath}}*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}*{{moduleName}}.{{classname}}* | [**{{operationId}}**]({{apiDocPath}}{{classname}}.md#{{operationId}}) | **{{httpMethod}}** {{path}} | {{#summary}}{{summary}}{{/summary}}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

## Documentation for Models

{{#models}}{{#model}} - [{{moduleName}}.{{classname}}]({{modelDocPath}}{{classname}}.md)
{{/model}}{{/models}}

## Documentation for Authorization

{{^authMethods}} All endpoints do not require authorization.
{{/authMethods}}{{#authMethods}}{{#last}} Authentication schemes defined for the API:{{/last}}{{/authMethods}}
{{#authMethods}}### {{name}}

{{#isApiKey}}- **Type**: API key
- **API key parameter name**: {{keyParamName}}
- **Location**: {{#isKeyInQuery}}URL query string{{/isKeyInQuery}}{{#isKeyInHeader}}HTTP header{{/isKeyInHeader}}
{{/isApiKey}}
{{#isBasic}}- **Type**: HTTP basic authentication
{{/isBasic}}
{{#isOAuth}}- **Type**: OAuth
- **Flow**: {{flow}}
- **Authorization URL**: {{authorizationUrl}}
- **Scopes**: {{^scopes}}N/A{{/scopes}}
{{#scopes}}  - {{scope}}: {{description}}
{{/scopes}}
{{/isOAuth}}

{{/authMethods}}
